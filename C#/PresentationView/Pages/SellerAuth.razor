@page "/seller/auth"
@using HTTPClients.ClientInterfaces
@using Domain.Shopping.Models

@inject IAdminService AdminService
@inject NavigationManager NavigationManager
@inject IUserService UserService;

<div class="wrapper">
    <div class="auth-wrapper">
        <h1>Authorize Sellers</h1>
        <input type="text" placeholder="search"/>
        <div class="auth-list">
            @foreach (var seller in _sellers)
            {
                <div class="auth-item">
                    <div class="auth-item__name">@seller.FirstName @seller.LastName</div>
                    <div class="auth-item__email">@seller.Email</div>
                    <div class="auth-item__button">
                        <button class="btn btn-primary" @onclick="() => DeleteSeller(seller.Id)">Delete</button>
                    </div>
                    @if (seller.IsAuthorized)
                    {
                        <input checked="checked" type="checkbox" class="auth-item__checkbox" @onchange="() => ToggleAuthorization(seller.Id)"/> 
                    }
                    else
                    {
                        <input type="checkbox" class="auth-item__checkbox" @onchange="() => ToggleAuthorization(seller.Id)"/> 
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ICollection<Seller> _sellers = new List<Seller>();

    protected override async Task OnInitializedAsync()
    {
        ICollection<User> users = await UserService.GetAllAsync();
        foreach (var user in users)
        {
            if (user is Seller seller)
            {
                _sellers.Add(seller);
            }
        }
    }

    private async Task ToggleAuthorization(int id)
    {
        bool isAuthorized = await IsSellerAuthorized(id);
        await AdminService.AuthorizeSellerAsync(id, !isAuthorized);
        await OnInitializedAsync();
    }

    private async Task<bool> IsSellerAuthorized(int id)
    {
        Seller seller = (Seller)(await UserService.GetByIdAsync(id))!;
        if (seller.IsAuthorized)
        {
            return true;
        }
        return false;
    }

    private async Task DeleteSeller(int id)
    {
        NavigationManager.NavigateTo("/seller/auth", true);
    }
}