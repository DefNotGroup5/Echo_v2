@using HTTPClients.ClientInterfaces
@using HTTPClients.Implementations
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService

<nav class="navbar">
    <button class="nav-button" id="home-button" @onclick="Home">Home</button>
    <div class="central-buttons">
        <button class="nav-button" @onclick="Store">Store</button>
            <button class="nav-button" @onclick="Cart">Cart</button>
            <button class="nav-button" @onclick="Wishlist">Wishlist</button>
            <button class="nav-button" @onclick="Support">Support</button>
    </div>
    
    <AuthorizeView Policy="IsAdmin">
        <Authorized>
            <button class="nav-button" @onclick="Admin">Admin</button>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Policy="IsAuthorizedSeller">
        <Authorized>
            <button class="nav-button" @onclick="Seller">Seller</button>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <Authorized>
            <button class="login-button" @onclick="Logout">Logout</button>
        </Authorized>
        <NotAuthorized>
        <button class="login-button" @onclick="Login">Login</button>
     </NotAuthorized>
    </AuthorizeView>
   
    
</nav>

@code {
    

    private string _loginButtonText = "Login";
    private bool _isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private void NavigateTo(string route)
    {
        NavigationManager.NavigateTo($"/{route}");
    }
    
    private void Admin()
    {
        NavigationManager.NavigateTo("/admindash");
    }
    private void Login()
    {
        NavigationManager.NavigateTo("/Login");
    }
    private void Seller()
    {
        NavigationManager.NavigateTo("/sellerdash");
    }

    private void Store()
    {
        NavigationManager.NavigateTo("/items");
    }

    private void Cart()
    {
        NavigationManager.NavigateTo("/cart");
    }
    private void Wishlist()
    {
        NavigationManager.NavigateTo("/wishlist");
    }

    private void Home()
    {
        NavigationManager.NavigateTo("/");
    }
    private void Support()
    {
     NavigationManager.NavigateTo("/request-support");
    }

    private async Task Logout()
    {
        await UserService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }
}