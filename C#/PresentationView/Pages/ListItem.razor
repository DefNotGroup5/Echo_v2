@page "/listitem"
@using Microsoft.AspNetCore.Components.Forms
@using HTTPClients.ClientInterfaces
@using Domain.Shopping.DTOs
@using PresentationView.ComponentServices.Interfaces
@using FileOptions = Supabase.Storage.FileOptions
@using System.IO
@inject Supabase.Client Supabase
@inject IItemService ItemService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IConfirmationService ConfirmationService;


<AuthorizeView Policy="IsAuthorizedSeller">
    <Authorized>
        <div class="wrapper">
            <div class="list-items-wrapper">
                <h1>List an item</h1>
                <div class="inputs-container">
                    <div class="input-box-container">
                        <div class="row">
                            <input type="text" placeholder="Name" class="input-box input-box1" @bind="_name"/>
                            <input type="text" placeholder="Price" class="input-box input-box3" @bind="_price"/>
                        </div>
                        <div class="row">
                            <label class="q-label">Quantity: </label>
                            <input type="number" placeholder="Initial Quantity" class="input-box input-box2" @bind="_quantity"/>
                        </div>
                        <div class="row">
                            <textarea style="resize: none" placeholder="Description" class="input-box input-box5" @bind="_description"></textarea>
                        </div>
                    </div>
                    <div class="input-box-container">
                        <div class="input-box input-box6">
                            <InputFile OnChange="OnFileSelected"/>
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(_result))
                {
                    <label>@_result</label>
                }
                @if (!_confirmPublish)
                {
                    <button class="button" @onclick="ShowConfirmation">Publish</button>
                }
                else
                {
                    <div class="buttons">
                        <div class="confirmation-text">
                            <button class="buttons-style" disabled>Are you sure?</button>
                        </div>
                        <div class="confirmation-buttons">
                            <button class="button" @onclick="PublishItem">Yes</button>
                            <button class="buttons-style" @onclick="CancelPublish">No</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string _name = "";
    private string _price = "";
    private int _quantity = 0;
    private string _description = "";
    private IBrowserFile? _file;
    private bool _confirmPublish = false;
    private int _userId;
    private string _result;

    private void ShowConfirmation()
    {
        _confirmPublish = true;
    }

    private void CancelPublish()
    {
        _confirmPublish = false;
    }
    private async Task PublishItem()
    {
        NavigationManager.NavigateTo("/...");
        try
        {
            _result = "";
            await InitializeUserIdAsync();
            string? imageUrl = await UploadToSupabase();
            if (imageUrl != null) await ItemService.CreateAsync(new ItemCreationDto(_userId, _name, imageUrl, _description, double.Parse(_price), _quantity));
            string confirmationTitle = "Item created!!";
            string confirmationDescription = "Your item has been added for sale!";
            ConfirmationService.ShowConfirmation(confirmationTitle, confirmationDescription, HandleConfirmationResult);
            
            _name = "";
            _price = "";
            _quantity = 0;
            _description = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _result = e.Message;
        }
    }
    
    
    private async Task InitializeUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is {IsAuthenticated: true })
        {
            var userIdClaim = user.FindFirst("Id"); 
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                _userId = userId;
            }
        }
    }
    
    private void HandleConfirmationResult(bool isConfirmed)
    {
        if (isConfirmed)
        {
            NavigationManager.NavigateTo("/items");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.GetMultipleFiles().FirstOrDefault();
    }

    private async Task<string?> UploadToSupabase()
    {
        try
        {
            if (_file != null)
            {
                var storage = Supabase.Storage.From("Item_Photos");
                var uniqueFileName = $"{DateTime.UtcNow:yyyyMMddHHmmssfff}_{Guid.NewGuid()}_{_userId}.{_file.ContentType}";
                var fileBytes = await ConvertFileToByteArray(_file);
                var options = new FileOptions()
                {
                    ContentType = _file.ContentType
                };
                var response = await storage.Upload(fileBytes, uniqueFileName, options);
                Console.WriteLine(response);
                var publicUrl = await Supabase.Storage.From("Item_Photos").CreateSignedUrl(uniqueFileName, 999999999);
                Console.WriteLine(publicUrl);
                return publicUrl;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        return null;
    }

    private async Task<byte[]> ConvertFileToByteArray(IBrowserFile file)
    {
        using (var ms = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(ms);
            return ms.ToArray();
        }
    }
}