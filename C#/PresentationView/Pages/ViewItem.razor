@page "/items/view/{ItemId:int}"
@using Domain.Shopping.Models
@using HTTPClients.ClientInterfaces
@using Domain.Shopping.DTOs
@inject IShoppingCartService ShoppingCartService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IItemService ItemService;
<div class="wrapper">
    @if (_item != null)
    {
        <div class="item-container">
            <div class="image">
                <img src="@_item.ImageUrl"/>
            </div>
            <div class="info">
                <div class="info-text">
                    @if (_item.Quantity > 0)
                    {
                        <label id="stock">In Stock</label>
                    }
                    else
                    {
                        <label id="out-stock">Out Of Stock</label>
                    }
                    <p id="name">@_item?.Name</p>
                    <p id="description">@_item?.Description</p>
                </div>
                <div class="quantity-price">
                    <div class="quantity">
                        <h3>Quantity</h3>
                        <div class="quantity-choice">
                            <label class="q-choice" id="q-minus" @onclick="() => ChangeQuantity('-')">-</label>
                            <label class="q-choice" id="q-number">@_quantity</label>
                            <label class="q-choice" id="q-plus" @onclick="() => ChangeQuantity('+')">+</label>
                        </div>
                    </div>
                    <div class="price">
                        <h3>Price Per Unit</h3>
                        <label>@_item?.Price DKK</label>
                    </div>
                </div>
                <button @onclick="AddToShoppingCart">Add To Cart</button>
            </div>
        </div>
    }
    else
    {
        <p>Such item does not exist!</p>
    }
</div>

@code {
    private Item? _item;
    private int _quantity = 1;
    private int _userId;
    [Parameter]
    public int ItemId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeUserIdAsync();
        _item = await ItemService.GetById(ItemId);
        _quantity = 1;
    }

    private Task ChangeQuantity(char type)
    {
        switch (type)
        {
            case '+':
            {
                if (_quantity != 10)
                {
                    _quantity++;
                }
                break;
            }
            case '-':
            {
                if (_quantity != 1)
                {
                    _quantity--;
                }
                break;
            }
        }
        return Task.CompletedTask;
    }
    
    private async Task InitializeUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("Id"); 
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                _userId = userId;
            }
        }
    }

    private async Task AddToShoppingCart()
    {
        if (_item != null)
        {
            CartItemCreationDto dto = new CartItemCreationDto()
            {
                ItemId = _item.Id,
                CustomerId = _userId,
                Quantity = _quantity
            };
            await ShoppingCartService.CreateAsync(dto);
        }
    }
}