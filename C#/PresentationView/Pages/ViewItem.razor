@page "/items/view/{ItemId:int}"
@using Domain.Shopping.Models
@using HTTPClients.ClientInterfaces
@using Microsoft.AspNetCore.Authentication
@inject IItemService ItemService;
@inject IShoppingCartService ShoppingCartService;
@inject IReviewService ReviewService;
@inject IUserService UserService;
<div class="wrapper">
    @if (_item != null)
    {
        <div class="item-container">
            <div class="image">
                <img src="@_item.ImageUrl"/>
            </div>
            <div class="info">
                <div class="info-text">
                    @if (_item.Quantity > 0)
                    {
                        <label id="stock">In Stock</label>
                    }
                    else
                    {
                        <label id="out-stock">Out Of Stock</label>
                    }
                    <p id="name">@_item?.Name</p>
                    <p id="description">@_item?.Description</p>
                </div>
                <div class="quantity-price">
                    <div class="quantity">
                        <h3>Quantity</h3>
                        <div class="quantity-choice">
                            <label class="q-choice" id="q-minus" @onclick="() => ChangeQuantity('-')">-</label>
                            <label class="q-choice" id="q-number">@_quantity</label>
                            <label class="q-choice" id="q-plus" @onclick="() => ChangeQuantity('+')">+</label>
                        </div>
                    </div>
                    <div class="price">
                        <h3>Price Per Unit</h3>
                        <label>@_item?.Price DKK</label>
                    </div>
                </div>
                <button @onclick="AddToCart">Add To Cart</button>
            </div>
        </div>
        <div class="review-section">
            <h2>Add a Review</h2>
            <EditForm Model="_review" OnValidSubmit="HandleReviewSubmit">
                <div class="form-group">
                    <label for="rating">Rating (1-5):</label>
                    <InputNumber id="rating" class="form-control" @bind-value="_review.Rating" min="1" max="5" />
                    <ValidationMessage For="@(() => _review.Rating)" />
                </div>
                <div class="form-group">
                    <label for="comment">Comment:</label>
                    <InputTextArea id="comment" class="form-control" @bind-value="_review.Comment" />
                    <ValidationMessage For="@(() => _review.Comment)" />
                </div>
                <button type="submit" class="btn btn-primary">Submit Review</button>
            </EditForm>
        </div>
    }
    else
    {
        <p>Such item does not exist!</p>
    }
</div>

@code {
    private Item? _item;
    private int _quantity = 1;
    private Review _review = new Review();
    private IEnumerable<Review> _itemReviews;
    [Parameter]
    public int ItemId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _item = await ItemService.GetById(ItemId);
        _quantity = 1;
        _itemReviews = (await ReviewService.GetReviewsByItemAsync(ItemId)).ToList();
        _review.ItemId = ItemId;
        var currentUserId = await UserService.GetCurrentUserIdAsync();
        _review.UserId = currentUserId ?? 0;
    }

    private async Task HandleReviewSubmit()
    {
        var addedReview = await ReviewService.AddReviewAsync(_review);
        if (addedReview != null)
        {
            _itemReviews = _itemReviews.Append(addedReview);
            _review = new Review();
            StateHasChanged();
        }
        else
        {
    // Handle the error case
        }
    }

    private Task ChangeQuantity(char type)
    {
        switch (type)
        {
            case '+':
            {
                if (_quantity != 10)
                {
                    _quantity++;
                }
                break;
            }
            case '-':
            {
                if (_quantity != 1)
                {
                    _quantity--;
                }
                break;
            }
        }
        return Task.CompletedTask;
    }

    private Task AddToCart()
    {
        if (_item != null)
        {
            ShoppingCartService.AddItemToShoppingCart(_item, _quantity);
            Console.WriteLine(ShoppingCartService.GetShoppingCart().ItemsInCart);
        }
        return Task.CompletedTask;
    }
}