@page "/ManageCategories"
@using HTTPClients.ClientInterfaces
@using Domain.Account.Models
@using Microsoft.VisualBasic
@using Domain.Account.DTOs
@inject ICategoryService CategoryService;
@inject NavigationManager NavigationManager;

 <div class="wrapper">
        <NavBar></NavBar>
        <div class = "ManageCategories">
        <h1>Manage Categories</h1>
            <div class="wrapper2">
                <div class="search-bar">
                    <input type="text" placeholder="Search" class="search">
                    <button class="button " @onclick="() => FindCategory(_currentName)">Search</button>
                </div>
               
                    @if (_categories != null && _categories.Any())
                {
                    @foreach (var category in _categories)
                    {
                        <div class="categories">
                            <p>Category</p>
                            <button class="button" @onclick="EditCategoryName">Edit</button>
                            <button class="button" @onclick="() => DeleteCategory(_currentName)">Delete</button>
                        </div>
                    }


                }
                else
                    {
                        <p>No categories, try again :/</p> 
                    }
                }
               
                }

           </div>
    
            <button class="button-add" @onclick="AddCategory()">Add Category</button>
    
        </div>
   
   </div> 
    

@code {

    private string? _categoryService;
    private ICollection<string?> _categories;
    private string _currentName = "";
    private string? _categorySearchedName;
    private string? _categoryToBeDeleted;
    
    
    public EventArgs EventArgs { get; }

   protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.GetAllCategories();
        
    }

    private async Task<Category?> AddCategory(Category newCategory)
    {
        _categoryService = await CategoryService.AddCategoryAsync(new CategoryCreationDto(_currentName));
        return new Category(_categoryService);

    }


    private async Task<string?> FindCategory(string _currentName)
    {
        _categorySearchedName = await CategoryService.GetCategoryByName(_currentName);
        return _categorySearchedName;
    }
    
    private async Task<string?> EditCategoryName()
    {
        <!--_categoryName = await CategoryService.GetCategoryByName(name);
        String? editedName = _categoryName.Replace("name", "newName");
        return editedName;-->
        
        string newName = Microsoft.VisualBasic.Interaction.InputBox("Please enter a new name for this category:", "Edit this Category's Name", _currentName);

        if (!string.IsNullOrWhiteSpace(newName))
        {
            _currentName = newName;
        }
        return _currentName;

    }


    private async Task<string?> DeleteCategory(string _categoryName)
    {
        _categoryToBeDeleted = await _categoryService.DeleteCategory(_categoryName);
        return null;
    }


}
