@page "/request-support"
@using Domain.Shopping.Models
@using HTTPClients.ClientInterfaces
@using Domain.Account.DTOs
@using PresentationView.ComponentServices.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IUserService UserService;
@inject IConfirmationService ConfirmationService;
@inject ISupportService SupportService;
@inject NavigationManager NavigationManager;
@attribute [Authorize]
<div class="wrapper">
    <AuthorizeView>
        <Authorized>
            <div class="container">
                <h1>Customer Service</h1>
                <h2>How can we help you?</h2>
                <div class="messages-container">
                    <div class="chat">
                        @if (_messages.Count == 0)
                        {
                            _latestMessage = null;
                        }
                        else
                        {
                            foreach (var message in _messages.OrderBy(m => m.Id))
                            {

                                if (!string.IsNullOrEmpty(message.Response))
                                {
                                    <p>@_user?.Email: @message.Request</p>
                                    <p>Admin: @message.Response</p>
                                    _latestMessage = message;
                                }
                                else
                                {
                                    <p>@_user?.Email: @message.Request</p>
                                    _latestMessage = message;
                                }
                            }
                        }
                    </div>
                    <input @bind="_request" class="send-text" placeholder="Write Here" type="text">
                </div>
                <div class="button-span">
                    @if (!string.IsNullOrEmpty(_latestMessage?.Response))
                    {
                        <button @onclick="() => SendRequest(_latestMessage)" class="send-button">Send</button>
                    }
                    else
                    {
                        <button disabled class="send-button">Send</button>
                    }
                </div>
            </div>
            </Authorized>
                    <NotAuthorized>
                         <p>Requesting support is available only to customers and authorized sellers!.</p>
                    </NotAuthorized>
                </AuthorizeView>
</div>

@code {
    private int _userId;
    private string? _request;
    private Message? _latestMessage = null;
    private ICollection<Message> _messages = new List<Message>(); 
    private User? _user;

    protected override async Task OnInitializedAsync()
    {
        await InitializeUserIdAsync();
        await GatherMessages();
        _user = await UserService.GetByIdAsync(_userId);
    }

    private async Task InitializeUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("Id");
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
            {
                _userId = userId;
            }
        }
    }
    
    private async Task GatherMessages()
    {
        _messages = (await SupportService.GetAll())
            .Where(message => message.CustomerId == _userId)
            .ToList();
    }

    private async Task SendRequest(Message? latestMessage)
    {
        if (latestMessage == null || !string.IsNullOrEmpty(latestMessage?.Response))
        {
            await SupportService.RequestSupport(new MessageRequestDto()
            {
                CustomerId = _userId,
                Request = _request
            });
        }
        _request = "";
        await OnInitializedAsync();
        ConfirmationService.ShowConfirmation("Message Sent!", "The Message was sent successfully! Our team will be with you in a second, please refresh ocassionaly to check for updates!", HandleConfirmationResult);
    }
    
    private void HandleConfirmationResult(bool isConfirmed)
    {
        if (isConfirmed)
        {
            NavigationManager.NavigateTo("/request-support");
        }
    }

}