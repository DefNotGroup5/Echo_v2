@page "/LogInAccount"
@using Domain.Account.DTOs
@using HTTPClients.ClientInterfaces
@inject IUserService userService 
@using System.ComponentModel.DataAnnotations
@using HTTPClients.ClientInterfaces
<div class="card">
    <h3>My Account</h3>
        @if (_isLogin)
        {
            //Login form
            <div class="form-group field">
                <label>Email </label>
                <input type="email" @bind="email" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(result))
                {
                    <label style="@messageColor">@result</label>
                }
            </div>
            <div class="form-group field">
                <label>Password </label>
                <input type="password" @bind="password" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(result))
                {
                    <label style="@messageColor">@result</label>
                }
            </div>
            <button @onclick="LoginAsync">Login</button>
            <button @onclick="SwitchToRegister">Switch to Register</button>
        }
        else
        {
            //register form
    <div class="form-group field">
        <label>First Name </label>
        <input type="text" @bind="firstName" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(result))
        {
            <label style="@messageColor">@result</label>
        }
    </div>
    <div class="form-group field">
        <label>Last Name </label>
        <input type="text" @bind="lastName" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(result))
        {
            <label style="@messageColor">@result</label>
        }
    </div>
     <div class="form-group field">
            <label>Email </label>
            <input type="email" @bind="email" @bind:event="oninput"/>
            @if (!string.IsNullOrEmpty(result))
            {
                <label style="@messageColor">@result</label>
            }
     </div>
    <div class="form-group field">
        <label>Password </label>
        <input type="password" @bind="password" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(result))
        {
            <label style="@messageColor">@result</label>
        }
    </div>
    <div class="form-group field">
        <label>Address </label>
        <input type="text" @bind="address" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(result))
        {
            <label style="@messageColor">@result</label>
        }
    </div>
    <div class="form-group field">
        <label>City </label>
        <input type="text" @bind="city" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(result))
        {
            <label style="@messageColor">@result</label>
        }
    </div>
     <div class="form-group field">
                <label>Postcode </label>
                <input type="text" @bind="postcode" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(result))
                {
                    <label style="@messageColor">@result</label>
                }
     </div>
     <div class="form-group field">
                <label>Country </label>
                <input type="text" @bind="country" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(result))
                {
                    <label style="@messageColor">@result</label>
                }
     </div>
            <div class="form-group field">
                <label>What type of user are you?</label>
                <select @bind="isSeller">
                    <option value="false">Customer</option>
                    <option value="true">Seller</option>
                </select>
            </div> 
            <button @onclick="Create">Register</button>
            <button @onclick="SwitchToLogin">Switch to Login</button>
        }
</div>




@code {

    private string firstName = "";
    private string lastName = "";
    private string password = "";
    //I'll keep the email as string for now, but I'll figure out appropriate type
    private string email = "";
    private string address = "";
    private string city = "";
    private int postcode = 0;
    private string country = "";
    private bool isSeller = false;
    private string result = "";
    private string messageColor = "";
    private bool _isLogin = true;

    private void SwitchToRegister()
    {
        _isLogin = false;
        ClearFields();
    }

    private void SwitchToLogin()
    {
        _isLogin = true;
        ClearFields();
    }

    private void ClearFields()
    {
        email = "";
        password = "";
        result = "";
        messageColor = "";
    }
    /*
     <select @bind="completedStatusFilter">
                    <option value="all">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
     */
    
    //add bitton register
    //add link to login
    //potato

    private async Task Create()
    {
        result = "";

        try
        {
            await userService.CreateAsync(new UserCreationDto(email, firstName, lastName, password, address, city, postcode, country, isSeller:isSeller));
           // await IServiceProviderIsService.Create(new AccountCreationDto(name, password, email, address));
            firstName = "";
            lastName = "";
            password = "";
            email = "";
            address = "";
            city = "";
            postcode = 0;
            country = "";
            isSeller = false;
            result = "Success!";
            messageColor = "green";
        }
        catch (Exception e)
        {
            await Console.Error.WriteAsync("Something went wrong");
            Console.WriteLine(e);
            result = e.Message;
            messageColor = "red";
        }
    }
    
    private async Task LoginAsync()
    {
        result = "";

        try
        {
            await userService.LoginAsync(email, password);
    // Clear the fields on successful login
            email = "";
            password = "";
            result = "User Successfully Logged In";
    // Add the necessary navigation logic if required
        }
        catch (Exception e)
        {
            await Console.Error.WriteAsync("Something went wrong");
            Console.WriteLine(e);
            result = e.Message;
            messageColor = "red";
        }
    }

  }
}